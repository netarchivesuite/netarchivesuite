package dk.netarkivet.harvester.harvesting.report;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Set;

import org.junit.Test;

import dk.netarkivet.common.utils.Settings;
import dk.netarkivet.harvester.HarvesterSettings;
import dk.netarkivet.harvester.datamodel.StopReason;
import dk.netarkivet.harvester.harvesting.PersistentJobData;
import dk.netarkivet.harvester.heritrix3.Heritrix3Files;
import dk.netarkivet.harvester.heritrix3.report.HarvestReportFactory;
import dk.netarkivet.harvester.heritrix3.report.HarvestReportGenerator;

public class HarvestReportGeneratorTest {

	// INFO about the crawl.log. Only the dns info for the kb.dk was harvested, because the seed was behind a firewall at the time of harvest. 
	/*
	netarkivet.dk 	EH_frontpages_400000000Bytes_500Objects 	1,542,726 	73 	Domain Completed
	raeder.dk 	EH_frontpages_400000000Bytes_500Objects 	2,505 	4 	Domain Completed
	kb.dk 	EH_frontpages_400000000Bytes_500Objects 	65 	1 	Domain Completed

	Seed list
	http://netarkivet.dk/adgang/
	http://netarkivet.dk/in-english/
	http://www.raeder.dk/
	http://kb-prod-udv-001.kb.dk/netarchivesuite/clock.php
	*/

	
	@Test
	public void testReportGenerator() throws IOException {
		File crawldir = new File("src/test/resources/crawldir");
		PersistentJobData pjd = new PersistentJobData(crawldir);
		File h3Bundle = Files.createTempFile("fake-path-to-h3-bundle", "").toFile();
		File certificat = Files.createTempFile("fake-path-to-h3-certificat", "").toFile();
		Settings.set(HarvesterSettings.HERITRIX3_BUNDLE, h3Bundle.getAbsolutePath());
		Settings.set(HarvesterSettings.HERITRIX3_CERTIFICATE, certificat.getAbsolutePath());
		Heritrix3Files files = Heritrix3Files.getH3HeritrixFiles(crawldir, 
				pjd);
		HarvestReportGenerator hrg = new HarvestReportGenerator(files);
		DomainStatsReport dsr = new DomainStatsReport(hrg.getDomainStatsMap(), 
				hrg.getDefaultStopReason()); 
		HarvestReport hr = HarvestReportFactory.generateHarvestReport(dsr);
		assertEquals(hr.getDefaultStopReason(), StopReason.DOWNLOAD_UNFINISHED);
		Set<String> dNames = hr.getDomainNames();
		assertTrue("Number of domainnames found in the crawllog should not be zero", dNames.size() > 0);
		for (String dName: dNames) {
			//System.out.println("dName '" + dName +"': " + hr.getByteCount(dName) + ", " +  hr.getObjectCount(dName));
			
			// bytecount will be zero for all domains, if data comes from crawl.log generated by a Heritrix template 
			// where the ContentSizeAnnotationPostProcessor is not included.
			assertTrue("bytecount should be non-zero for all domains, but this is not true for domain '" + dName + "'", hr.getByteCount(dName) > 0);
			assertTrue("objectcount should be non-zero for all domains, but this is not true for domain '" + dName + "'", hr.getObjectCount(dName) > 0);
		}
		assertTrue(hr.getByteCount("kb.dk") ==  65L);
		assertTrue(hr.getObjectCount("kb.dk") ==  1L);
		assertTrue(hr.getByteCount("netarkivet.dk") ==  1542726L);
		assertTrue(hr.getObjectCount("netarkivet.dk") ==  73L);
		assertTrue(hr.getByteCount("raeder.dk") ==  2505L);
		assertTrue(hr.getObjectCount("raeder.dk") ==  4L);
		
		// Note that the HarvestReport contains info about other domains than the one in the seeds
	}
	
	
	
	

}
